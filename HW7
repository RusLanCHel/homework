//Main

package lessonG;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Comparator;

public class Main {
    public static void main(String[] args) throws InvocationTargetException, IllegalAccessException {
        Test test = new Test();

        Method[] methods = test.getClass().getDeclaredMethods();
        ArrayList<Method> arrayList = new ArrayList<>();
        for(Method m: methods){
            if(m.isAnnotationPresent(TestA.class)){
                if(!(m.getAnnotation(TestA.class).priority() >= 0 && m.getAnnotation(TestA.class).priority() <= 10)){
                    throw new RuntimeException("bad priority");
                }
                arrayList.add(m);
            }
        }
        arrayList.sort(new Comparator<Method>() {
            @Override
            public int compare(Method o1, Method o2) {
                return o2.getAnnotation(TestA.class).priority() - o1.getAnnotation(TestA.class).priority();
            }
        });
        for(Method m: methods){
            if(m.isAnnotationPresent(BeforeSuite.class)){
                arrayList.add(0, m);
            }
            if(m.isAnnotationPresent(BeforeSuite.class)){
                arrayList.add(m);
            }

        }
        for(Method m: arrayList){
            m.invoke(null);
        }
    }
}
//Test
package lessonG;

public class Test {
    @BeforeSuite
    public static void before(){
        System.out.println("before program");
    }
    @TestA(priority = 1)
    public static void test1(){
        System.out.println("test1");
    }
    @TestA(priority = 2)
    public static void test2(){
        System.out.println("test2");
    }
    @TestA(priority = 3)
    public static void test3(){
        System.out.println("test3");
    }
    @TestA(priority = 4)
    public static void test4(){
        System.out.println("test5");
    }
    @TestA
    public static void test5(){
        System.out.println("test5");
    }
    @AfterSuite
    public static void end(){
        System.out.println("after program");
    }

}
//TestA
package lessonG;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface TestA {
    int priority() default 5;
}
//BeforeSuite
package lessonG;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface BeforeSuite {
}
//AfterSuite
package lessonG;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface AfterSuite {
}

